/*
Copyright 2019 The Kiam Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/uswitch/kiam/pkg/apis/iam/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IamRoleLister helps list IamRoles.
type IamRoleLister interface {
	// List lists all IamRoles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IamRole, err error)
	// IamRoles returns an object that can list and get IamRoles.
	IamRoles(namespace string) IamRoleNamespaceLister
	IamRoleListerExpansion
}

// iamRoleLister implements the IamRoleLister interface.
type iamRoleLister struct {
	indexer cache.Indexer
}

// NewIamRoleLister returns a new IamRoleLister.
func NewIamRoleLister(indexer cache.Indexer) IamRoleLister {
	return &iamRoleLister{indexer: indexer}
}

// List lists all IamRoles in the indexer.
func (s *iamRoleLister) List(selector labels.Selector) (ret []*v1alpha1.IamRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamRole))
	})
	return ret, err
}

// IamRoles returns an object that can list and get IamRoles.
func (s *iamRoleLister) IamRoles(namespace string) IamRoleNamespaceLister {
	return iamRoleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IamRoleNamespaceLister helps list and get IamRoles.
type IamRoleNamespaceLister interface {
	// List lists all IamRoles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IamRole, err error)
	// Get retrieves the IamRole from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IamRole, error)
	IamRoleNamespaceListerExpansion
}

// iamRoleNamespaceLister implements the IamRoleNamespaceLister
// interface.
type iamRoleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IamRoles in the indexer for a given namespace.
func (s iamRoleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IamRole, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamRole))
	})
	return ret, err
}

// Get retrieves the IamRole from the indexer for a given namespace and name.
func (s iamRoleNamespaceLister) Get(name string) (*v1alpha1.IamRole, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iamrole"), name)
	}
	return obj.(*v1alpha1.IamRole), nil
}
